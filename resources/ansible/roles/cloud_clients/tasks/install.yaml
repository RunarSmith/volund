---

- name: Install required packages (common for all OS)
  package:
    name: "{{ install_packages | flatten }}"
    state: present
  become: true

# === argocd cli ==========================================

- name: download argocd artifact from github
  include_tasks: "{{ role_path }}/../../custom_steps/github_download_artifact.yaml"
  vars:
    owner: argoproj
    repo: argo-cd
    local_path: "{{ volund_temp_folder }}/argocd"
    artifact_name_prefix: argocd-linux-
    artifact_name_suffix: amd64

- name: Installer le binaire Argo CD CLI
  copy:
    src: "{{ volund_temp_folder }}/argocd"
    dest: "/usr/local/bin/argocd"
    remote_src: yes
    mode: '0555'
  become: true

# === helm ================================================

- name: get latest tag name from github
  include_tasks: "{{ role_path }}/../../custom_steps/github_get_latest_tag.yaml"
  vars:
    owner: helm
    repo: helm

- name: Download and extract Helm
  unarchive:
    src: "https://get.helm.sh/helm-{{ latest_tag }}-linux-{{ binary_arch_name }}.tar.gz"
    dest: "{{ volund_temp_folder }}/"
    remote_src: yes

- name: Installer le binaire Helm
  copy:
    src: "{{ volund_temp_folder }}/linux-{{ binary_arch_name }}/helm"
    dest: "/usr/local/bin/helm"
    mode: '0755'
    remote_src: yes
  become: true

- name: install helm plugin unittest
  ansible.builtin.command:
    cmd: helm plugin list
  register: helm_plugin_list
  become: true
  become_user: "{{ default_username }}"

- name: install helm plugin unittest
  ansible.builtin.command:
    cmd: helm plugin install https://github.com/helm-unittest/helm-unittest.git
  become: true
  become_user: "{{ default_username }}"
  when: helm_plugin_list.stdout is not search('^unittest')


- name: List installed Helm plugins
  ansible.builtin.command:
    cmd: helm plugin list
  register: helm_plugins_output
  become: true
  become_user: "{{ default_username }}"

- name: Display installed Helm plugins
  ansible.builtin.debug:
    var: helm_plugins_output.stdout_lines

- name: Ensure Helm unittest plugin is installed
  ansible.builtin.command:
    cmd: helm plugin list
  register: helm_plugins_check
  become: true
  become_user: "{{ default_username }}"

- name: Fail if Helm unittest plugin is not installed
  ansible.builtin.fail:
    msg: "Helm unittest plugin is not installed!"
  when: helm_plugins_check.stdout is not search('unittest')

# === k9s =================================================

- name: download artifact from github
  include_tasks: "{{ role_path }}/../../custom_steps/github_download_artifact.yaml"
  vars:
    owner: derailed
    repo: k9s
    local_path: "{{ volund_temp_folder }}/"
    as_user: volund  # optional: default to root
    artifact_name_prefix: k9s_Linux
    artifact_name_suffix: "{{ binary_arch_name }}.tar.gz"
    unarchive: true

- name: Installer K9s
  copy:
    src: "{{ volund_temp_folder }}/k9s"
    dest: "/usr/local/bin/k9s"
    mode: '0755'
  become: true

# === kubectl =============================================

- name: Récupérer la dernière version stable de kubectl
  uri:
    url: https://dl.k8s.io/release/stable.txt
    return_content: yes
  register: kubectl_version

- name: Télécharger kubectl
  get_url:
    url: "https://dl.k8s.io/release/{{ kubectl_version.content | trim }}/bin/linux/{{ binary_arch_name }}/kubectl"
    dest: "/usr/local/bin/kubectl"
    mode: '0755'
  become: true

# === openshift cli oc ====================================

- name: Download and Extract oc binary
  ansible.builtin.unarchive:
    src: "{{ oc_client_url }}"
    dest: /usr/local/bin/
    remote_src: true
    creates: /usr/local/bin/oc
  become: true

- name: Ensure oc binary is executable
  ansible.builtin.file:
    path: /usr/local/bin/oc
    mode: '0755'
  become: true

# === stern ===============================================

- name: download artifact from github
  include_tasks: "{{ role_path }}/../../custom_steps/github_download_artifact.yaml"
  vars:
    owner: stern
    repo: stern
    local_path: "{{ volund_temp_folder }}"
    artifact_name_prefix: ""
    artifact_name_suffix: "_linux_{{ binary_arch_name }}.tar.gz"
    unarchive:  true

- name: Installer Stern
  copy:
    src: "{{ volund_temp_folder }}/stern"
    dest: "/usr/local/bin/stern"
    mode: '0755'
    remote_src: yes
  become: true

# === Azure cli ===========================================
# https://learn.microsoft.com/fr-fr/cli/azure/install-azure-cli-linux?view=azure-cli-latest&pivots=script

# - name: Download and install Azure CLI (Linux, non-Debian)
#   ansible.builtin.shell: |
#     curl -sL https://aka.ms/InstallAzureCli | bash
#   args:
#     creates: /usr/bin/az
#   become: true

# === AWS cli =============================================

# - name: Download AWS CLI v2 installer
#   get_url:
#     url: "https://awscli.amazonaws.com/awscli-exe-linux-{{ binary_arch_name }}.zip"
#     dest: "{{ volund_temp_folder }}/awscliv2.zip"
#     mode: '0644'
#   become: true

# - name: Unzip AWS CLI installer
#   unarchive:
#     src: "{{ volund_temp_folder }}/awscliv2.zip"
#     dest: "{{ volund_temp_folder }}/"
#     remote_src: yes
#   become: true

# - name: Install AWS CLI v2
#   command: "{{ volund_temp_folder }}/aws/install"
#   args:
#     creates: /usr/local/bin/aws
#   become: true

# === GCP cli =============================================

# - name: Download Google Cloud SDK installer
#   get_url:
#     url: "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-{{ gcp_sdk_version | default('latest') }}-linux-{{ binary_arch_name }}.tar.gz"
#     dest: "{{ volund_temp_folder }}/google-cloud-sdk.tar.gz"
#     mode: '0644'
#   become: true

# - name: Extract Google Cloud SDK
#   unarchive:
#     src: "{{ volund_temp_folder }}/google-cloud-sdk.tar.gz"
#     dest: "{{ volund_temp_folder }}/"
#     remote_src: yes
#   become: true

# - name: Install Google Cloud SDK
#   command: "{{ volund_temp_folder }}/google-cloud-sdk/install.sh --quiet"
#   args:
#     creates: "/usr/local/bin/gcloud"
#   become: true

# - name: Ensure gcloud CLI is available in /usr/local/bin
#   file:
#     src: "{{ volund_temp_folder }}/google-cloud-sdk/bin/gcloud"
#     dest: "/usr/local/bin/gcloud"
#     state: link
#     force: yes
#     mode: '0755'
#   become: true









# - name: Ensure AWS CLI is installed
#   command: aws --version
#   register: aws_cli_version
#   changed_when: false
#   failed_when: aws_cli_version.rc != 0

# - name: Check gcloud CLI installation
#   command: gcloud --version
#   register: gcloud_cli_version
#   changed_when: false
#   failed_when: gcloud_cli_version.rc != 0
